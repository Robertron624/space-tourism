// Generated by CodiumAI

describe('changeTabFocus', () => {

    // Tests that pressing the right arrow key moves the tab focus to the next tab on the right
    it('should move focus to next tab on right when right arrow key is pressed', () => {
        const event = new KeyboardEvent('keydown', { keyCode: 39 });
        tabList.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).toBe('true');
    });

    // Tests that pressing the left arrow key moves the tab focus to the next tab on the left
    it('should move focus to next tab on left when left arrow key is pressed', () => {
        const event = new KeyboardEvent('keydown', { keyCode: 37 });
        tabList.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).toBe('true');
    });

    // Tests that pressing a key that is not the left or right arrow key does not change the tab focus or tabindex
    it('should not change focus or tabindex when a non-arrow key is pressed', () => {
        const event = new KeyboardEvent('keydown', { keyCode: 32 });
        tabList.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).toBe('true');
    });

    // Tests that pressing the right arrow key when the last tab is focused moves the tab focus to the first tab
    it('should move focus to first tab when right arrow key is pressed on last tab', () => {
        tabFocus = tabs.length - 1;
        const event = new KeyboardEvent('keydown', { keyCode: 39 });
        tabList.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).toBe('true');
    });

    // Tests that pressing the left arrow key when the first tab is focused moves the tab focus to the last tab
    it('should move focus to last tab when left arrow key is pressed on first tab', () => {
        tabFocus = 0;
        const event = new KeyboardEvent('keydown', { keyCode: 37 });
        tabList.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).toBe('true');
    });

    // Tests that the function does not execute if the event target is disabled
    it('should not execute if event target is disabled', () => {
        const disabledTab = tabs[1];
        disabledTab.setAttribute('disabled', '');
        const event = new KeyboardEvent('keydown', { keyCode: 39 });
        disabledTab.dispatchEvent(event);
        expect(tabs[tabFocus].getAttribute('aria-selected')).not.toBe('true');
    });
});
